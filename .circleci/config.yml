version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow name.
    parameters:
      workflow_name:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name << parameters.workflow_name >>
             aws s3 rm s3://udapeople-htheiery939487973hsh/ --recursive
             

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_name:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/23Dbi96xCKybVjYCEiUWNYg9/<< parameters.workflow_name>>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi 
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            echo "Front-end build successful"  
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*The front-end build job has failed. This Workflow did not succeed*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*The back-end build job has failed. This Workflow did not succeed*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*The front-end test job has failed. This Workflow did not succeed*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*The back-end test job has failed. This Workflow did not succeed*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            exit 0
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-end scan
          command: |
            cd backend
            npm install
            #npm audit fix --audit-level=critical --force
            #npm audit --audit-level=critical
            npm audit fix --force
            exit 0
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  # Deploy Udapeople infrastructure
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run: # install tar utility which is not present in this image but it is required to have workflow workspace capability.
          name: Install tar utility
          command: |
              yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |              
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - destroy-environment:
            workflow_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - destroy-environment:
            workflow_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # Here's where you will add some code to rollback on failure      

  # Configure Udapeople infrastructure
  configure-infrastructure:
    docker: # Docker image here that supports Ansible
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - run: export ANSIBLE_HOST_KEY_CHECKING=False
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: 
             - e8:88:61:21:f7:92:67:bb:f8:37:1a:03:55:4f:54:b2
      - run:
          name: Install dependencies
          command: |
             apk add --update ansible
             apk add openssh-client
      - run:
          name: Configure server
          command: |
              ansible-playbook -vvvv -i ~/project/.circleci/ansible/inventory.txt -c ssh .circleci/ansible/configure-server.yml

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run and save the migration output
          command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "****" in your local terminal first using: curl -d 'email=your-email-ID@domain.com' https://kvdb.io
                  curl https://kvdb.io/23Dbi96xCKybVjYCEiUWNYg9/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              yum update
              yum install -y tar gzip
              yum install -y python3
              yum -y install epel-release
              yum -y install nodejs npm
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \ 
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      #Destroy the environment and revert the migration on fail
      - destroy-environment:
            workflow_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
            workflow_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker: # Docker image here that supports Ansible
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - run: export ANSIBLE_HOST_KEY_CHECKING=False
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: 
             - e8:88:61:21:f7:92:67:bb:f8:37:1a:03:55:4f:54:b2
      - run:
          name: Install dependencies
          command: |
             apk add --update ansible
             apk add openssh-client
             apk add --update nodejs-current npm
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
             apk add --update curl
      - run:
          name: Get backend url
          command: |
             export API_URL="http://${BACKEND_IP}:3030"
             echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
                URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
                echo ${URL} 
                if curl -s ${URL} | grep "Welcome"
                then
                    # Change this to 0 after the job fails
                  return 1
                else
                  return 1
                fi       
      - destroy-environment:
            workflow_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
            workflow_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_name: migration_${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker: # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
             yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum install -y tar gzip
        - run:
            name: Get old stack workflow id
            command: |
                # Fetch the Old workflow ID
                export OldWorkflowID=$(aws cloudformation \
                        list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                        --no-paginate --output text)
                echo OldWorkflowID: "${OldWorkflowID}"
                echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                # Fetch the stack names          
                export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                        --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                echo Stack names: "${STACKS[@]}" 

        - run:
            name: Remove old stacks and files
            command: |
                  if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
                  then
                    # your code goes here
                    aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                    aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                    aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                  else
                  # your code goes here
                  fi
            
workflows:
  default:
    jobs:
      - build-frontend:      
          context: udapeople # has an env var called MY_ENV_VAR
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
          #  branches:
          #    only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
